{
    "config": {
        "log_path": "./jsonapitest-results.json",
        "defaults": {
            "api_call": {
                "request": {
                    "base_url": "http://127.0.0.1:3000",
                    "headers": {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    }
                }
            }
        }
    },
    "data": {"app_version": "v2.0.1"},
    "suites": [
        {
            "name": "t6 Datapoints Suite",
            "tests": [
                {
                	"name": "can post datapoint to Float Flow",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
                                "flow_id": "{{saved.flow_id_float}}",
                                "mqtt_topic": "couleurs/test",
                                "publish": true,
                                "save": true,
                                "value": 123.456,
                                "text": "Float Value",
                                "retention": "{{saved.retention_float}}"
                            },
                            "save": {
                            	"saved.data_id_full_url": "body.data.0.links.self",
                            	"saved.data_id": "body.data.0.id",
                            	"saved.time": "body.data.0.attributes.time"
                            },
                            "status": 200,
                            "assert": {
        	                    "select": "body.data",
        	                    "size": 1
        	                }
                        }
                    ]
                },
                {
                	"name": "can post datapoint to Flow",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
                                "flow_id": "{{saved.flow_id_string}}",
                                "mqtt_topic": "couleurs/test",
                                "publish": true,
                                "save": true,
                                "value": "Hello World 1",
                                "text": "Meta text information on default retention"
                            },
                            "save": {
                            	"saved.data_id_full_url": "body.data.0.links.self",
                            	"saved.data_id": "body.data.0.id",
                            	"saved.time": "body.data.0.attributes.time",
                            	"saved.retention": "body.data.0.attributes.retention"
                            },
                            "status": 200,
                            "assert": {
        	                    "select": "body.data",
        	                    "size": 1
        	                }
                        }
                    ]
                },
                {
                	"name": "DELAY",
                    "description": "Needs to wait a bit for data storage that can be a little bit asynchroneous.",
                    "api_calls": [
                        {
                            "request": "GET https://postman-echo.com/delay/2",
                            "status": "200"
                        }
                    ]
                },
                {
                	"name": "can post datapoint to Flow on a specific retention policy",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
                                "flow_id": "{{saved.flow_id_string}}",
                                "mqtt_topic": "couleurs/test",
                                "publish": true,
                                "save": true,
                                "value": "Hello World 2",
                                "text": "Meta text information on retention1w retention",
                                "retention": "retention1w"
                            },
                            "status": 200,
                            "assert": [{
        	                    "select": "body.data",
        	                    "size": 1
        	                  },
        	                  {
        	                    "select": "body.data.0.attributes.retention",
        	                    "equal": "retention1w"
        	                  }
        	                ]
                        }
                    ]
                },
                {
                	"name": "DELAY",
                    "description": "Needs to wait a bit for data storage that can be a little bit asynchroneous.",
                    "api_calls": [
                        {
                            "request": "GET https://postman-echo.com/delay/2",
                            "status": "200"
                        }
                    ]
                },
                {
                	"name": "can post datapoint to Float Flow and using Api-Key + Api-secret",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "x-api-key": "{{saved.accessTokenKey}}",
                                "x-api-secret": "{{saved.accessTokenSecret}}"
                            },
                            "params": {
                                "flow_id": "{{saved.flow_id_float}}",
                                "mqtt_topic": "couleurs/test",
                                "publish": true,
                                "save": true,
                                "value": 123.456,
                                "text": "Float Value",
                                "retention": "{{saved.retention_float}}",
                                "datatype_id": "e7dbdc23-5fa8-4083-b3ec-bb99c08a2a35"
                            },
                            "save": {
                            },
                            "status": 200,
                            "assert": [{
        	                    "select": "body.data",
        	                    "size": 1
        	                  }
        	                ]
                        }
                    ]
                },
                {
                	"name": "DELAY",
                    "description": "Needs to wait a bit for data storage that can be a little bit asynchroneous.",
                    "api_calls": [
                        {
                            "request": "GET https://postman-echo.com/delay/2",
                            "status": "200"
                        }
                    ]
                },
                {
                	"name": "can get a specific data from Flow without declaring the retention",
                    "description": "This should list measured datapoint as defined by default on the Flow (retention1w)",
                    "api_calls": [
                        {
                        	"request": "GET {{saved.data_id_full_url}}",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.retention",
        	                    "equal": "retention1w"
        	                }
                        }
                    ]
                },
                {
                	"name": "can get a specific data from Flow declaring an invalid retention",
                    "description": "This should not list any measured datapoint. Data should be stored to retention1w",
                    "api_calls": [
                        {
                        	"request": "GET {{saved.data_id_full_url}}?retention=unidentified_should_fallback_to_retention1w",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.retention",
        	                    "equal": "retention1w"
        	                }
                        }
                    ]
                },
                {
                	"name": "can get a specific data from Flow declaring a wrong retention",
                    "description": "This should not list any measured datapoint. Data should be stored to retention1w",
                    "api_calls": [
                        {
                        	"request": "GET {{saved.data_id_full_url}}?retention=retention1y",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "status": 404
                        }
                    ]
                },
                {
                	"name": "DELAY",
                    "description": "Needs to wait a bit for data storage that can be a little bit asynchroneous.",
                    "api_calls": [
                        {
                            "request": "GET https://postman-echo.com/delay/2",
                            "status": "200"
                        }
                    ]
                },
                {
                	"name": "can get a specific data from Flow forcing retention (from the body)",
                    "description": "get a specific data from Flow",
                    "api_calls": [
                        {
                        	"request": "GET {{saved.data_id_full_url}}",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
                                "retention": "retention1w"
                            },
                            "status": 200
                        }
                    ]
                },
                {
                	"name": "DELAY",
                    "description": "Needs to wait a bit for data storage that can be a little bit asynchroneous.",
                    "api_calls": [
                        {
                            "request": "GET https://postman-echo.com/delay/10",
                            "status": "200"
                        }
                    ]
                },
                {
                	"name": "can get a specific data from Flow forcing retention (from the query param)",
                    "description": "get a specific data from Flow",
                    "api_calls": [
                        {
                        	"request": "GET {{saved.data_id_full_url}}?retention={{saved.retention}}",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "status": 200
                        }
                    ]
                },
                {
                	"name": "can post datapoint 1. DataPoint not signed, not crypted",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
								"flow_id": "{{saved.flow_id_string}}",
								"value": "957.140",
								"text": "1. DataPoint not signed, not crypted",
								"save": false,
								"mqtt_topic": "test",
								"publish": true,
								"latitude": "54.2235",
								"longitude": "160.1224",
								"retention": "retention1w"
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data",
        	                    "size": 1
        	                }
                        }
                    ]
                },
                {
                	"name": "can Sanitize according to a Datatype",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
								"flow_id": "{{saved.flow_id_float}}",
							    "value": "     10\n",
							    "text": "Est enim accusantium nesciunt accusamus non.",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "latitude": "53.5057",
							    "longitude": "-83.2966",
							    "datatype_id": "e7dbdc23-5fa8-4083-b3ec-bb99c08a2a35",
							    "preprocessor": [
							        {
							            "name": "sanitize",
							            "datatype": "float"
							        }
							    ]
							},
                            "status": 200,
                            "assert": [{
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": 10
        	                },{
        	                    "select": "body.data.0.attributes.preprocessor.status",
        	                    "equal": ["completed", "completed"]
        	                }]
                        }
                    ]
                },
                {
                	"name": "can Sanitize according to a Datatype",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
								"flow_id": "{{saved.flow_id_float}}",
							    "value": "     10.1234\n",
							    "text": "Est enim accusantium nesciunt accusamus non.",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "latitude": "53.5057",
							    "longitude": "-83.2966",
							    "datatype_id": "e7dbdc23-5fa8-4083-b3ec-bb99c08a2a35",
							    "preprocessor": [
							        {
							            "name": "sanitize",
							            "datatype": "float"
							        }
							    ]
							},
                            "status": 200,
                            "assert": [{
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": 10.1234
        	                },{
        	                    "select": "body.data.0.attributes.preprocessor.status",
        	                    "equal": ["completed", "completed"]
        	                }]
                        }
                    ]
                },
                {
                	"name": "can transform string based on regexp",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
								"flow_id": "{{saved.flow_id_string}}",
							    "value": "John Smith",
							    "text": "",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "datatype_id": "a394e18f-12bd-4c22-b9c3-74c387d1a8db",
							    "preprocessor": [
								    {
							            "name": "transform",
							            "mode": "replace",
							            "pattern": "(\\w+)\\s(\\w+)",
							            "replacer": "$2 (Jr.), $1"
							        },
							        {
							            "name": "sanitize",
							            "datatype": "string"
							        }
							    ]
							},
                            "status": 200,
                            "assert": [{
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": "Smith (Jr.), John"
        	                },{
        	                    "select": "body.data.0.attributes.preprocessor.status",
        	                    "equal": ["completed", "completed", "completed"]
        	                }]
                        }
                    ]
                },
                {
                	"name": "can post datapoint transform > capitalCase",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
								"flow_id": "{{saved.flow_id_string}}",
							    "value": "Quia nisi et.",
							    "text": "Est enim accusantium nesciunt accusamus non.",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "latitude": "53.5057",
							    "longitude": "-83.2966",
							    "preprocessor": [
							        {
							            "name": "transform",
							            "mode": "capitalCase"
							        }
							    ]
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": "Quia Nisi Et"
        	                }
                        }
                    ]
                },
                {
                	"name": "can post datapoint transform > camelCase",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
								"flow_id": "{{saved.flow_id_string}}",
							    "value": "Omnis nisi quam quos quaerat ipsam ex et.",
							    "text": "Est enim accusantium nesciunt accusamus non.",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "latitude": "53.5057",
							    "longitude": "-83.2966",
							    "preprocessor": [
							        {
							            "name": "transform",
							            "mode": "camelCase"
							        }
							    ]
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": "omnisNisiQuamQuosQuaeratIpsamExEt"
        	                }
                        }
                    ]
                },
                {
                	"name": "can post datapoint transform > headerCase",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
								"flow_id": "{{saved.flow_id_string}}",
							    "value": "USB cyan.Mozilla/5.0 (Windows; U; Windows NT 6.0) AppleWebKit/537.1.0 (KHTML, like Gecko) Chrome/18.0.878.0 Safari/537.1.0_Garth",
							    "text": "Est enim accusantium nesciunt accusamus non.",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "latitude": "53.5057",
							    "longitude": "-83.2966",
							    "preprocessor": [
							        {
							            "name": "transform",
							            "mode": "headerCase"
							        }
							    ]
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": "Usb-Cyan-Mozilla-5-0--Windows--U--Windows-Nt-6-0--Apple-Web-Kit-537-1-0--Khtml--Like-Gecko--Chrome-18-0-878-0-Safari-537-1-0-Garth"
        	                }
                        }
                    ]
                },
                {
                	"name": "can convert time minutes > secondes",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
							    "value": 1.00,
							    "flow_id": "FakeFlowIdToMakeSureThePreprocessorComesFromPayload",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": false,
							    "latitude": "-62.3086",
							    "longitude": "30.6491",
							    "datatype_id": "e7dbdc23-5fa8-4083-b3ec-bb99c08a2a35",
							    "preprocessor": [
							        {
							            "name": "convert",
							            "type": "time",
							            "from": "m",
							            "to": "s"
							        }
							    ]
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": 60
        	                }
                        }
                    ]
                },
                {
                	"name": "can Validate Boolean",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
							    "value": "100.123456",
							    "text": "",
							    "flow_id": "FakeFlowIdToMakeSureThePreprocessorComesFromPayload",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "preprocessor": [
							        {
							            "name": "sanitize",
							            "datatype": "float"
							        }
							    ]
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": 100.123456
        	                }
                        }
                    ]
                },
                {
                	"name": "can process multiple preprocessor",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
							    "value": "test email@domain.com",
							    "text": "",
							    "flow_id": "FakeFlowIdToMakeSureThePreprocessorComesFromPayload",
							    "save": false,
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "preprocessor": [
							        {
							            "name": "transform",
							            "mode": "snakeCase"
							        },
							        {
							            "name": "transform",
							            "mode": "dotCase"
							        },
							        {
							            "name": "transform",
							            "mode": "upperCase"
							        },
							        {
							            "name": "validate",
							            "test": "isEmail"
							        }
							    ]
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": "TEST.EMAIL@DOMAIN.COM"
        	                }
                        }
                    ]
                },
                {
                	"name": "can identify facial expression on image (AIDC)",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
							    "text": "This is a base64 encoded image",
							    "save": true,
                                "retention": "retention1w",
							    "publish": true,
							    "unit": "",
							    "flow_id": "{{saved.flow_id_string}}",
							    "mqtt_topic": "image-test-processing",
							    "preprocessor": [
							        {
							            "name": "aidc",
							            "mode": "faceExpressionRecognition"
							        }
							    ],
							    "value": ""
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": "sad"
        	                }
                        }
                    ]
                },
                {
                	"name": "can identify facial expression on image (AIDC)",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
							    "text": "This is a base64 encoded image",
							    "save": true,
                                "retention": "retention1w",
							    "publish": true,
							    "unit": "",
							    "flow_id": "{{saved.flow_id_string}}",
							    "mqtt_topic": "image-test-processing",
							    "preprocessor": [
							        {
							            "name": "aidc",
							            "mode": "ageRecognition"
							        }
							    ],
							    "value": ""
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": 40
        	                }
                        }
                    ]
                },
                {
                	"name": "can identify facial expression on image (AIDC)",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
							    "text": "This is a base64 encoded image",
							    "save": true,
                                "retention": "retention1w",
							    "publish": true,
							    "unit": "",
							    "flow_id": "{{saved.flow_id_string}}",
							    "mqtt_topic": "image-test-processing",
							    "preprocessor": [
							        {
							            "name": "aidc",
							            "mode": "genderRecognition"
							        }
							    ],
							    "value": ""
							},
                            "status": 200,
                            "assert": {
        	                    "select": "body.data.0.attributes.value",
        	                    "equal": "male"
        	                }
                        }
                    ]
                },
                {
                	"name": "can send data to a Fusion Track A",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
				                "flow_id": "{{saved.track_A_id}}",
							    "value": "10.0",
							    "text": "",
							    "save": true,
                                "retention": "retention1w",
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "track_id": "{{saved.track_id}}",
							    "fusion": {
							        "algorithm": "average"
							    },
							    "preprocessor": [
							        {
							            "name": "sanitize",
							            "datatype": "float"
							        }
							    ]
							},
                            "status": 200,
                            "assert": [{
        	                        "select": "body.data.0.attributes.value",
        	                        "equal": 10.0
        	                    }
	        	            ]
                        }
                    ]
                },
                {
                	"name": "can send data to a Fusion Track B",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
				                "flow_id": "{{saved.track_B_id}}",
							    "value": "15.0",
							    "text": "",
							    "save": true,
                                "retention": "retention1w",
							    "unit": "",
							    "mqtt_topic": "test",
							    "publish": "false",
							    "track_id": "{{saved.track_id}}",
							    "fusion": {
							        "algorithm": "average_weighted"
							    },
							    "preprocessor": [
							        {
							            "name": "sanitize",
							            "datatype": "float"
							        }
							    ]
							},
                            "status": 200,
                            "assert": [
	                            {
	        	                    "select": "body.data.0.attributes.value",
	        	                    "equal": 20.0
	        	                },
	                            {
	        	                    "select": "body.data.0.attributes.fusion.algorithm",
	        	                    "equal": "average_weighted"
	        	                },
	                            {
	        	                    "select": "body.data.0.attributes.fusion.messages",
	        	                    "size": 2
	        	                },
	                            {
	        	                    "select": "body.data.0.attributes.fusion.measurements",
	        	                    "size": 2
	        	                },
	                            {
	        	                    "select": "body.data.0.attributes.fusion.initialValue",
	        	                    "equal": 15
	        	                },
	                            {
	        	                    "select": "body.data.0.attributes.fusion.correction",
	        	                    "equal": -5
	        	                },
	                            {
	        	                    "select": "body.data.0.attributes.fusion.primary_flow",
	        	                    "equal": "{{saved.track_id}}"
	        	                },
	                            {
	        	                    "select": "body.data.0.attributes.retention",
	        	                    "equal": "retention1w"
	        	                }
	        	            ]
                        }
                    ]
                },
                {
                	"name": "can publish a signed payload",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data/{{saved.flow_id_string}}",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
                                "signedPayload": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YWx1ZSI6IjIuIERhdGFwb2ludCBzaWduZWQsIG5vdCBjcnlwdGVkIiwidGV4dCI6InNpZ25lZCwgbm90IGNyeXB0ZWQiLCJwdWJsaXNoIjoidHJ1ZSIsInNhdmUiOnRydWUsInVuaXQiOiIiLCJtcXR0X3RvcGljIjoiIiwibGF0aXR1ZGUiOiIzOS44MDAzMjciLCJsb25naXR1ZGUiOiI2LjM0MzUzMCIsIm9iamVjdF9pZCI6ImRjODlhYjgxLWVlY2ItNDVlOS05ZTEyLWUzYjcxZWE3ZjA0NCJ9.7WcMCIyshtJU_sJ2eZbhLIuEVE44wbZoL-lumyNIOqw",
                                "object_id": "{{saved.object_id}}"
                            },
                            "status": 200,
                            "assert": [
	                            {
	        	                    "select": "body.data.0.attributes.value",
	        	                    "equal": "2. Datapoint signed, not crypted"
	        	                }
	        	            ]
                        }
                    ]
                },
                {
                	"name": "can update a Flow to force signature",
                    "description": "update a Flow",
                    "api_calls": [
                        {
                        	"request": "PUT /{{app_version}}/flows/{{saved.flow_id_string}}",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
                                "data_type": "a394e18f-12bd-4c22-b9c3-74c387d1a8d",
                                "name": "My Flow for String is UPDATED with a required signature",
                                "objects": [
                                    "{{saved.object_id}}"
                                ],
                                "unit": "",
                                "theme": "",
                                "retention": "retention1w",
                                "require_signed": true,
                                "unit_id": "c528045b-4928-45ad-83fa-4a242eb6059e"
                            },
                            "save": {
                                "saved.flow_id_signature_required": "body.flow.data.id"
                            },
                            "status": 200,
                            "assert": [{
        	                    "select": "body.flow.data.attributes.name",
        	                    "equal": "My Flow for String is UPDATED with a required signature"
        	                },{
        	                    "select": "body.flow.data.attributes.retention",
        	                    "equal": "retention1w"
        	                }]
                        }
                    ]
                },
                {
                	"name": "Verify signed payload is required",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
				                "flow_id": "{{saved.flow_id_signature_required}}",
							    "value": 111.0,
							    "text": "",
							    "save": true,
                                "retention": "retention1w",
							    "unit": "",
							    "mqtt_topic": "test",
							    "object_id": "{{saved.object_id}}",
							    "publish": false
							},
                            "status": 412,
                            "assert": [
	        	            ]
                        }
                    ]
                },
                {
                	"name": "Verify sentiment rule is adding annotation",
                    "description": "post datapoint to Flow",
                    "api_calls": [
                        {
                        	"request": "POST /{{app_version}}/data",
                            "headers": {
                                "Authorization": "Bearer {{saved.bearer_token}}"
                            },
                            "params": {
				                "flow_id": "{{saved.flow_id_sentiment}}",
							    "value": "t6 is a great platform to connect physical Objects with timeseries DB - successfully tested.",
							    "text": "",
							    "save": true,
                                "retention": "retention1w",
							    "unit": "",
							    "mqtt_topic": "test",
							    "object_id": "{{saved.object_id}}",
							    "publish": false
							},
                            "status": 200,
                            "assert": [
	        	            ]
                        }
                    ]
                }
            ]
        }
    ]
}